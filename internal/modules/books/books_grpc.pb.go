// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package books

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BooksServiceV1Client is the client API for BooksServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BooksServiceV1Client interface {
	GetBooksByAuthor(ctx context.Context, in *GetBooksRequest, opts ...grpc.CallOption) (*BooksListResponse, error)
	GetAuthorsByBook(ctx context.Context, in *GetAuthorsRequest, opts ...grpc.CallOption) (*AuthorsListResponse, error)
}

type booksServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewBooksServiceV1Client(cc grpc.ClientConnInterface) BooksServiceV1Client {
	return &booksServiceV1Client{cc}
}

func (c *booksServiceV1Client) GetBooksByAuthor(ctx context.Context, in *GetBooksRequest, opts ...grpc.CallOption) (*BooksListResponse, error) {
	out := new(BooksListResponse)
	err := c.cc.Invoke(ctx, "/api.books.BooksServiceV1/GetBooksByAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksServiceV1Client) GetAuthorsByBook(ctx context.Context, in *GetAuthorsRequest, opts ...grpc.CallOption) (*AuthorsListResponse, error) {
	out := new(AuthorsListResponse)
	err := c.cc.Invoke(ctx, "/api.books.BooksServiceV1/GetAuthorsByBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BooksServiceV1Server is the server API for BooksServiceV1 service.
// All implementations must embed UnimplementedBooksServiceV1Server
// for forward compatibility
type BooksServiceV1Server interface {
	GetBooksByAuthor(context.Context, *GetBooksRequest) (*BooksListResponse, error)
	GetAuthorsByBook(context.Context, *GetAuthorsRequest) (*AuthorsListResponse, error)
	mustEmbedUnimplementedBooksServiceV1Server()
}

// UnimplementedBooksServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedBooksServiceV1Server struct {
}

func (UnimplementedBooksServiceV1Server) GetBooksByAuthor(context.Context, *GetBooksRequest) (*BooksListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooksByAuthor not implemented")
}
func (UnimplementedBooksServiceV1Server) GetAuthorsByBook(context.Context, *GetAuthorsRequest) (*AuthorsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorsByBook not implemented")
}
func (UnimplementedBooksServiceV1Server) mustEmbedUnimplementedBooksServiceV1Server() {}

// UnsafeBooksServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BooksServiceV1Server will
// result in compilation errors.
type UnsafeBooksServiceV1Server interface {
	mustEmbedUnimplementedBooksServiceV1Server()
}

func RegisterBooksServiceV1Server(s grpc.ServiceRegistrar, srv BooksServiceV1Server) {
	s.RegisterService(&BooksServiceV1_ServiceDesc, srv)
}

func _BooksServiceV1_GetBooksByAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServiceV1Server).GetBooksByAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.books.BooksServiceV1/GetBooksByAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServiceV1Server).GetBooksByAuthor(ctx, req.(*GetBooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BooksServiceV1_GetAuthorsByBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServiceV1Server).GetAuthorsByBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.books.BooksServiceV1/GetAuthorsByBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServiceV1Server).GetAuthorsByBook(ctx, req.(*GetAuthorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BooksServiceV1_ServiceDesc is the grpc.ServiceDesc for BooksServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BooksServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.books.BooksServiceV1",
	HandlerType: (*BooksServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBooksByAuthor",
			Handler:    _BooksServiceV1_GetBooksByAuthor_Handler,
		},
		{
			MethodName: "GetAuthorsByBook",
			Handler:    _BooksServiceV1_GetAuthorsByBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "books.proto",
}
